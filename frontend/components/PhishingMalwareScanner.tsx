'use client'

import React, { useState } from 'react'

function getMalwareSummary(result: any) {
  if (!result || typeof result !== 'object') return null
  const engines = Object.entries(result)
  let flagged = 0
  let total = engines.length
  let threatLabels: string[] = []
  engines.forEach(([_, data]: any) => {
    if (data.result && !['clean', 'undetected', 'unrated'].includes(data.result)) flagged++
    if (data.result && !['clean', 'undetected', 'unrated', 'suspicious'].includes(data.result)) {
      if (!threatLabels.includes(data.result)) threatLabels.push(data.result)
    }
    if (data.category && !['harmless', 'undetected'].includes(data.category) && !threatLabels.includes(data.category)) {
      threatLabels.push(data.category)
    }
  })
  return { flagged, total, threatLabels }
}

function MalwareSummaryCard({ result, file }: { result: any, file: File | null }) {
  const summary = getMalwareSummary(result)
  if (!summary) return null
  const { flagged, total, threatLabels } = summary
  const isMalicious = flagged > 0

  return (
    <div className={`flex flex-col mb-4 p-4 rounded-xl border ${isMalicious ? 'border-red-500 bg-red-900/20' : 'border-green-500 bg-green-900/20'}`}>
      <div className="flex flex-col md:flex-row items-center justify-between w-full">
        <div className="flex items-center gap-4 mb-2 md:mb-0">
          <div className="flex flex-col items-center justify-center">
            <span className={`text-3xl font-bold ${isMalicious ? 'text-red-500' : 'text-green-400'}`}>{flagged}</span>
            <span className="text-xs text-gray-400">Flagged</span>
          </div>
          <div className="flex flex-col items-center justify-center">
            <span className="text-lg font-semibold text-white">/ {total}</span>
            <span className="text-xs text-gray-400">Engines</span>
          </div>
          <div className="ml-8 flex items-center">
            <span className={`text-2xl font-extrabold tracking-wide ${isMalicious ? 'text-red-400' : 'text-green-400'}`}>
              {isMalicious ? 'Malicious' : 'Clean'}
            </span>
          </div>
        </div>
      </div>
      <div className="w-full mt-2">
        {file && (
          <span className="w-full break-all">
            <b>File:</b> <span className="truncate block max-w-full" title={file.name}>{file.name} {file.size ? `(${(file.size/1024).toFixed(1)} KB)` : ''}</span>
          </span>
        )}
        {threatLabels.length > 0 && (
          <span>
            <b>Popular threat label:</b>{' '}
            <span className="text-red-400 font-semibold">{threatLabels.join(', ')}</span>
          </span>
        )}
      </div>
    </div>
  )
}

function getStatusAndColor(data: any) {
  const safeValues = ['clean', 'harmless', 'undetected', 'unrated', 'safe']
  const threatValues = ['phishing', 'malicious', 'threat', 'suspicious']
  const result = (data.result || '').toLowerCase()
  const category = (data.category || '').toLowerCase()

  if (safeValues.includes(result) && safeValues.includes(category)) {
    return { status: 'Safe', color: 'text-green-400', icon: '✔️' }
  }
  if (threatValues.includes(result)) {
    return { status: result.charAt(0).toUpperCase() + result.slice(1), color: 'text-red-400', icon: '❌' }
  }
  if (threatValues.includes(category)) {
    return { status: category.charAt(0).toUpperCase() + category.slice(1), color: 'text-red-400', icon: '❌' }
  }
  return { status: result || category || 'Unknown', color: 'text-yellow-400', icon: '⚠️' }
}

function renderMalwareResultTable(result: any) {
  if (!result || typeof result !== 'object') return null
  const engines = Object.entries(result)
  if (engines.length === 0) return <p className="text-gray-400">No results.</p>
  return (
    <div className="overflow-x-auto max-h-96">
      <table className="min-w-full border border-neon-purple rounded-lg text-sm bg-black/60">
        <thead>
          <tr className="bg-neon-purple/20">
            <th className="px-3 py-2 border-b border-neon-purple text-left">Engine</th>
            <th className="px-3 py-2 border-b border-neon-purple text-left">Status</th>
            <th className="px-3 py-2 border-b border-neon-purple text-left">Category</th>
          </tr>
        </thead>
        <tbody>
          {engines.map(([engine, data]: any, idx) => {
            const { status, color, icon } = getStatusAndColor(data)
            return (
              <tr key={engine} className={idx % 2 === 0 ? 'bg-black/40' : 'bg-black/20'}>
                <td className="px-3 py-2 border-b border-neon-purple font-semibold text-white">{engine}</td>
                <td className={`px-3 py-2 border-b border-neon-purple font-bold flex items-center gap-1 ${color}`}>{icon} {status}</td>
                <td className={`px-3 py-2 border-b border-neon-purple ${color}`}>{data.category || data.result || '-'}</td>
              </tr>
            )
          })}
        </tbody>
      </table>
    </div>
  )
}

function getPhishingSummary(result: any) {
  if (!result || typeof result !== 'object') return null
  const engines = Object.entries(result)
  let flagged = 0
  engines.forEach(([_, data]: any) => {
    if (data.result && !['clean', 'unrated', 'undetected'].includes(data.result)) flagged++
  })
  return { flagged, total: engines.length }
}

function PhishingSummaryCard({ result, url }: { result: any, url: string }) {
  const summary = getPhishingSummary(result)
  if (!summary) return null
  const { flagged, total } = summary
  const isMalicious = flagged > 0

  return (
    <div className={`flex flex-col mb-4 p-4 rounded-xl border ${isMalicious ? 'border-red-500 bg-red-900/20' : 'border-green-500 bg-green-900/20'}`}>
      <div className="flex flex-col md:flex-row items-center justify-between w-full">
        <div className="flex items-center gap-4 mb-2 md:mb-0">
          <div className="flex flex-col items-center justify-center">
            <span className={`text-3xl font-bold ${isMalicious ? 'text-red-500' : 'text-green-400'}`}>{flagged}</span>
            <span className="text-xs text-gray-400">Flagged</span>
          </div>
          <div className="flex flex-col items-center justify-center">
            <span className="text-lg font-semibold text-white">/ {total}</span>
            <span className="text-xs text-gray-400">Engines</span>
          </div>
          <div className="ml-8 flex items-center">
            <span className={`text-2xl font-extrabold tracking-wide ${isMalicious ? 'text-red-400' : 'text-green-400'}`}>{isMalicious ? 'Malicious' : 'Safe'}</span>
          </div>
        </div>
      </div>
      {url && (
        <div className="w-full mt-2">
          <b>URL:</b>{' '}
          <span className="break-all whitespace-pre-wrap block text-xs text-gray-200 bg-transparent max-w-full" title={url}>
            {url}
          </span>
        </div>
      )}
    </div>
  )
}

function renderPhishingResult(result: any) {
  if (!result || typeof result !== 'object') return null
  const engines = Object.entries(result)
  if (engines.length === 0) return <p className="text-gray-400">No results.</p>
  return (
    <div className="overflow-x-auto max-h-96">
      <table className="min-w-full border border-neon-purple rounded-lg text-sm bg-black/60">
        <thead>
          <tr className="bg-neon-purple/20">
            <th className="px-3 py-2 border-b border-neon-purple text-left">Engine</th>
            <th className="px-3 py-2 border-b border-neon-purple text-left">Status</th>
            <th className="px-3 py-2 border-b border-neon-purple text-left">Category</th>
          </tr>
        </thead>
        <tbody>
          {engines.map(([engine, data]: any, idx) => {
            const { status, color, icon } = getStatusAndColor(data)
            return (
              <tr key={engine} className={idx % 2 === 0 ? 'bg-black/40' : 'bg-black/20'}>
                <td className="px-3 py-2 border-b border-neon-purple font-semibold text-white">{engine}</td>
                <td className={`px-3 py-2 border-b border-neon-purple font-bold flex items-center gap-1 ${color}`}>{icon} {status}</td>
                <td className={`px-3 py-2 border-b border-neon-purple ${color}`}>{data.category || data.result || '-'}</td>
              </tr>
            )
          })}
        </tbody>
      </table>
    </div>
  )
}

export default function PhishingMalwareScanner() {
  const [tab, setTab] = useState<'phishing' | 'malware'>('phishing')
  const [url, setUrl] = useState('')
  const [phishingResult, setPhishingResult] = useState<any>(null)
  const [phishingLoading, setPhishingLoading] = useState(false)
  const [phishingError, setPhishingError] = useState('')
  const [file, setFile] = useState<File | null>(null)
  const [malwareResult, setMalwareResult] = useState<any>(null)
  const [malwareLoading, setMalwareLoading] = useState(false)
  const [malwareError, setMalwareError] = useState('')

  const handlePhishingScan = async (e: React.FormEvent) => {
    e.preventDefault()
    setPhishingLoading(true)
    setPhishingError('')
    setPhishingResult(null)
    try {
      const res = await fetch('/api/phishing/scan', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ url }),
      })
      const data = await res.json()
      res.ok ? setPhishingResult(data.result) : setPhishingError(data.error || 'Scan failed')
    } catch {
      setPhishingError('Network error')
    } finally {
      setPhishingLoading(false)
    }
  }

  const handleMalwareScan = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!file) return setMalwareError('Please select a file')
    setMalwareLoading(true)
    setMalwareError('')
    setMalwareResult(null)
    try {
      const formData = new FormData()
      formData.append('file', file)
      const res = await fetch('/api/malware/scan', {
        method: 'POST',
        body: formData,
      })
      const data = await res.json()
      res.ok ? setMalwareResult(data.result) : setMalwareError(data.error || 'Scan failed')
    } catch {
      setMalwareError('Network error')
    } finally {
      setMalwareLoading(false)
    }
  }

  return (
    <div className="w-full max-w-5xl mx-auto mt-8 rounded-2xl border border-neon-purple bg-background shadow-xl p-6">
      <div className="flex mb-6">
        <button
          className={`flex-1 py-2 rounded-l-xl font-bold transition-all border-r border-neon-purple ${tab === 'phishing' ? 'bg-neon-purple text-black dark:text-purple-500 shadow-lg z-10' : 'bg-transparent text-neon-purple'}`}
          onClick={() => setTab('phishing')}
        >
          Phishing Scan
        </button>
        <button
          className={`flex-1 py-2 rounded-r-xl font-bold transition-all border-l border-neon-purple ${tab === 'malware' ? 'bg-neon-purple text-black dark:text-purple-500 shadow-lg z-10' : 'bg-transparent text-neon-purple'}`}
          onClick={() => setTab('malware')}
        >
          Malware Scan
        </button>
      </div>

      {tab === 'phishing' && (
        <form onSubmit={handlePhishingScan} className="flex flex-col gap-4">
          <input
            type="url"
            className="border border-neon-purple rounded px-4 py-2 bg-transparent text-black dark:text-white placeholder:text-gray-500 focus:ring-2 focus:ring-neon-purple"
            placeholder="Enter URL to scan..."
            value={url}
            onChange={e => setUrl(e.target.value)}
            required
          />
          <button
            type="submit"
            className="bg-neon-purple text-black dark:text-white font-semibold rounded px-4 py-2 hover:bg-purple-500 transition disabled:opacity-50"
            disabled={phishingLoading}
          >
            {phishingLoading ? 'Scanning...' : 'Scan URL'}
          </button>
          {phishingError && <p className="text-red-500 text-sm">{phishingError}</p>}
          {phishingResult && (
            <>
              <PhishingSummaryCard result={phishingResult} url={url} />
              <div className="mt-2">
                {renderPhishingResult(phishingResult)}
              </div>
            </>
          )}
        </form>
      )}

      {tab === 'malware' && (
        <form onSubmit={handleMalwareScan} className="flex flex-col gap-4">
          <input
            type="file"
            className="border border-neon-purple rounded px-4 py-2 bg-transparent text-white file:text-neon-purple file:bg-black file:border-none file:mr-2 file:rounded file:px-3 file:py-1 file:font-semibold"
            accept=".pdf,.doc,.docx,.apk,.exe,.zip,.rar"
            onChange={e => setFile(e.target.files?.[0] || null)}
          />
          <button
            type="submit"
            className="bg-neon-purple dark:text-white text-black font-semibold rounded px-4 py-2 hover:bg-purple-500 transition disabled:opacity-50"
            disabled={malwareLoading}
          >
            {malwareLoading ? 'Scanning...' : 'Scan File'}
          </button>
          {malwareError && <p className="text-red-500 text-sm">{malwareError}</p>}
          {malwareResult && (
            <>
              <MalwareSummaryCard result={malwareResult} file={file} />
              <div className="mt-2">
                {renderMalwareResultTable(malwareResult)}
              </div>
            </>
          )}
        </form>
      )}
    </div>
  )
}
